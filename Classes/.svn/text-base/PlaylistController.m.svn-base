//
//  LivePlaylistController.m
//  WXYCapp
//
//  Created by Jake on 10/13/10.
//  Copyright 2010 WXYC. All rights reserved.
//

#import <CoreData/CoreData.h>
#import "PlaylistController.h"
#import "JSON.h"
#import "Playcut.h"
#import "Talkset.h"
#import "Breakpoint.h"

NSString* const LPStatusChangedNotification = @"LPStatusChangedNotification";

@implementation PlaylistController

@synthesize URL;
@synthesize playlist;
@synthesize state;

- (void)setState:(LivePlaylistState)aStatus
{
	if (state != aStatus)
	{
		state = aStatus;
		[[NSNotificationCenter defaultCenter] postNotificationName:LPStatusChangedNotification object:self];
	}
}

- (LivePlaylistState)getState {
	return state;
}

#pragma mark JSON Business

- (void)getJSONFeedWithNumEntries:(int)num {
	URL = [NSURL URLWithString:[NSString stringWithFormat: @"http://www.wxyc.info/playlists/recentEntries?n=%d", num]];
	
	NSURLRequest *request = [NSURLRequest requestWithURL:URL];
	[[NSURLConnection alloc] initWithRequest:request delegate:self];
	
	[self setState:LP_INITIALIZED];
}

- (void)getJSONFeedWithNumEntries:(int)num referenceID:(int)referenceID direction:(NSString*)direction {
	URL = [NSURL URLWithString:[NSString stringWithFormat: @"http://www.wxyc.info/playlists/recentEntries?n=%d&referenceID=%d&direction=%@", 
									   num, referenceID, direction]];

	//NS/*Log(@"URL %@", URL);
	
	NSURLRequest *request = [NSURLRequest requestWithURL:URL];
	[[NSURLConnection alloc] initWithRequest:request delegate:self];
	
	[self setState:LP_INITIALIZED];
}


- (void)getJSONFeed {
	NSURLRequest *request = [NSURLRequest requestWithURL:URL];
	[[NSURLConnection alloc] initWithRequest:request delegate:self];
	
	[self setState:LP_INITIALIZED];
}

- (void)updatePlaylist {
	//NS/*Log(@"Updating");
	if ([playlist count] == 0)
		[self getJSONFeed];
	else {
		NSInteger referenceID = [[[playlist objectAtIndex:0] objectForKey:@"chronOrderID"] intValue];
		[self getJSONFeedWithNumEntries:20 referenceID:referenceID direction:@"next"];
	}
}

#pragma mark -
#pragma mark NSURLConnection delegate business

- (void)connection:(NSURLConnection *)connection didReceiveResponse:(NSURLResponse *)response {
	[responseData setLength:0];
	[self setState:LP_WAITING_FOR_DATA];
}

- (void)connection:(NSURLConnection *)connection didReceiveData:(NSData *)data {
	[responseData appendData:data];
	[self setState:LP_FETCHING];
}

- (void)connectionDidFinishLoading:(NSURLConnection *)connection {
	[self setState:LP_PARSING];
	
	// Store incoming data into a string
	NSString *jsonString = [[NSString alloc] initWithData:responseData encoding:NSASCIIStringEncoding];

	// Create a dictionary from the JSON string
	NSMutableArray *results = [jsonString JSONValue];
	
	//NSLog(@"%@", results);

	//get the frontmost chronOrderIDs from both arrays
	//so we know on what end to append the new entries
	NSInteger chronId_results = ([results count] == 0) ?
							0 : [[[results objectAtIndex:0] objectForKey:@"chronOrderID"] intValue];
	NSInteger chronId_playlist = ([playlist count] == 0) ?
							0 : [[[playlist objectAtIndex:0] objectForKey:@"chronOrderID"] intValue];
	
	if (chronId_results > chronId_playlist) {
		//check for gaps, ie, more than 20 entries have been entered
		//since we last updated the playlist
		NSInteger last_chronId_results = [[[results objectAtIndex:0] objectForKey:@"chronOrderID"] intValue];
		NSInteger delta = last_chronId_results - chronId_playlist;
		
		if ((delta > 1) && (delta < 20)) {
			[self getJSONFeedWithNumEntries:delta referenceID:chronId_playlist direction:@"next"];
			
			
		}
		
		//append results to front and replace playlistEntries
		[results addObjectsFromArray:playlist];
		[playlist setArray:results];
	} else if (chronId_results < chronId_playlist) {
		//append to back of playlistEntries
		[playlist addObjectsFromArray:results];
	}
	
	[responseData setLength:0];
	
	[self setState:LP_DONE];
}

#pragma mark constructors

-(PlaylistController*)init {
	self = [super init];
	
	playlist = [[NSMutableArray alloc] init];
	responseData = [[NSMutableData data] retain];
	[responseData initWithLength:0];
	
	return self;
}

-(PlaylistController*)initWithNSURL:(NSURL*)url {
	self = [super init];
	
	self.URL = url;
	playlist = [[NSMutableArray alloc] init];
	responseData = [[NSMutableData data] retain];
	[responseData initWithLength:0];

	return self;
}

- (void)dealloc {
	[responseData dealloc];
	[playlist dealloc];
    [super dealloc];
}

@end
