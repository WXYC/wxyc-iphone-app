//
//  Created by Jake Bromberg.
//  Copyright WXYC 2009-10. All rights reserved.
//

#import <CoreData/CoreData.h>
#import "PlaycutDetailsViewController.h"
#import "WebViewController.h"
#import "ButtonTableViewCell.h"
#import "WXYCDataStack.h"
#import "Playcut.h"

@implementation PlaycutDetailsViewController

#define UP 0
#define DOWN 1

@synthesize managedObjectContext;

enum DETAILS_TABLEVIEW_SECTION {
	INFO_SECTION,
	USER_ACTION_SECTION
};

enum INFO_CELL {
	ARTIST_INFO_CELL,
	SONG_INFO_CELL,
	ALBUM_INFO_CELL,
	LABEL_INFO_CELL
};

enum USER_ACTION_CELL {
	GOOGLE_CELL,
	DISCOGS_CELL,
	FAVORITE_CELL
};

- (void)viewWillAppear:(BOOL)animated {
    // Redisplay the data.
	self.title = @"Details";
}

- (NSInteger)numberOfSectionsInTableView:(UITableView *)tableView {
    // 1 section
    return 2;
}

- (NSString *)tableView:(UITableView *)tableView titleForHeaderInSection:(NSInteger)section {
	switch (section) {
		case INFO_SECTION:
			return @"";
			break;
		default:
			return @"Find this on";
			break;
	}
}

- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section {
	switch (section) {
		case INFO_SECTION:
			return 4;
			break;
		case USER_ACTION_SECTION:
			return 2;
			break;
		default:
			break;
	}
	
	return 0;
}


- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath {
	static NSString *CellIdentifier = @"Cell";
	
	UITableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:CellIdentifier];
	
	switch (indexPath.section) {
		case INFO_SECTION:
			if (cell == nil) {
				cell = [[UITableViewCell alloc] initWithStyle:UITableViewCellStyleValue2 reuseIdentifier:CellIdentifier];
			}
			
			cell.selectionStyle = UITableViewCellSelectionStyleNone;
			
			NSString *value;
			
			switch (indexPath.row) {
				case ARTIST_INFO_CELL:
					cell.textLabel.text = @"Artist";
					value = [currentData Artist];
					break;
				case SONG_INFO_CELL:
					cell.textLabel.text = @"Song";
					value = [currentData Song];
					break;
				case ALBUM_INFO_CELL: 
					cell.textLabel.text = @"Album";
					value = [currentData Album];
					break;
				case LABEL_INFO_CELL: 
					cell.textLabel.text = @"Label";
					value = [currentData Label];
					break;
			};
			
			
			cell.detailTextLabel.text = (([value length] != 0) ? value : @"(unavailable)");
			
			break;
		case USER_ACTION_SECTION: {
			ButtonTableViewCell *buttonCell = (ButtonTableViewCell*) [tableView dequeueReusableCellWithIdentifier:@"ButtonCell"];
			
			if (buttonCell==nil) {
				NSArray* topLevelObjects = (ButtonTableViewCell*)
				[[NSBundle mainBundle]
				 loadNibNamed:@"ButtonTableViewCell" 
				 owner:nil options:nil];
				
				buttonCell = (ButtonTableViewCell *)[topLevelObjects objectAtIndex:0];
			}
			
			switch (indexPath.row) {
				case GOOGLE_CELL: 
					buttonCell.description.text = @"Google";
					break;
				case DISCOGS_CELL: 
					buttonCell.description.text = @"Discogs";
					break;
				case FAVORITE_CELL:
					NSLog(@"favorite %i", [currentData Favorite]);
					if (![currentData Favorite]) {
						buttonCell.description.text = @"Favorite";
					} else {
						buttonCell.description.text = @"Unfavorite";
					}

					
					break;
					
			};
			
			cell = buttonCell;
			break;
		}
		default:
			break;
	}
	
	return cell;
}

- (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath {
	if (indexPath.section == 1) {
		[[self.tableView cellForRowAtIndexPath:indexPath] setSelected:NO animated:YES];
		
		if ([indexPath row] == FAVORITE_CELL) {
			if ([currentData Favorite]) {
//				[managedObjectContext deleteObject:currentData];
//				[self navigation
			} else {
				[currentData setFavorite:[[NSNumber alloc] initWithBool:YES]];
				
				NSPredicate *predicate = [NSPredicate
										  predicateWithFormat:@"(Artist == %@) AND (Song == %@)",
										  [currentData Artist], [currentData Song]];

				NSLog(@"Predicate %@", predicate);
				
				NSFetchRequest *request = [[NSFetchRequest alloc] init];
				NSEntityDescription *entity = [NSEntityDescription entityForName:@"Playcut" inManagedObjectContext:managedObjectContext];
				[request setEntity:entity];
				[request setPredicate:predicate];
				
				NSLog(@"PlaycutDetails didselect: %i", [currentData Favorite]);

				NSError *error;
				if (![managedObjectContext countForFetchRequest:request error:&error]) {
					[[Playcut alloc] initWithEntity:currentData insertIntoManagedObjectContext:managedObjectContext];
					
					if (![managedObjectContext save:&error]) {
						// Handle the error.
						NSLog(@"HALP!!!!");
						NSLog(@"%@",error);
					}
				} else {
					NSLog(@"Error %@", error);
				}
				
//				[error release];
//				[predicate release];
//				[entity release];

				[self.tableView reloadData];
			}
		} else {
			NSString *query = [NSString stringWithFormat: @"%@", [currentData Artist]];
			query = [query stringByAppendingString:@" "];
			query = [query stringByAppendingString:[NSString stringWithFormat: @"%@", [currentData Song]]];
			query = [query stringByReplacingOccurrencesOfString:@" " withString:@"+"];
			
			if ([indexPath row] == GOOGLE_CELL) {
				query = [@"http://www.google.com/search?q=" stringByAppendingString:query];
			} else if ([indexPath row] == DISCOGS_CELL) {
				query = [@"http://www.discogs.com/search?type=all&btn=Search&q=" stringByAppendingString:query];
			}
			
			/*** FIX THIS!!! WE NEED TO RELEASE THESE OBJECTS AT THE RIGHT TIME BUT WE CAN'T DO IT RIGHT AWAY... WHAT IS THE RIGHT TIME?***/
			NSURLRequest *requestObj = [NSURLRequest requestWithURL:[NSURL URLWithString:query]];

			WebViewController *webViewController = [[WebViewController alloc] initWithNibName:@"WebView" bundle:nil];
			[[self navigationController] pushViewController:webViewController animated:YES];
			[webViewController.webView setScalesPageToFit:YES];
			[webViewController.webView loadRequest:requestObj];
		}
	}
}

// Implement viewDidLoad to do additional setup after loading the view, typically from a nib.
- (void)viewDidLoad {
	[super viewDidLoad];
	
	managedObjectContext = [[WXYCDataStack sharedInstance] managedObjectContext];
}

- (void)viewDidAppear:(BOOL)animated {
	[super viewDidAppear:animated];
	[self becomeFirstResponder];
}


- (void)viewWillDisappear:(BOOL)animated {
	[super viewWillDisappear:animated];
	
//	[currentData release];
}

- (void)viewDidUnload {
	//self.favoritesArray = nil;
	//	[request release];
	//[dnc removeObserver:self name:NSManagedObjectContextDidSaveNotification object:managedObjectContext];
}

#pragma mark -
#pragma mark Memory management

- (void)didReceiveMemoryWarning {
    [super didReceiveMemoryWarning]; // Releases the view if it doesn't have a superview
    // Release anything that's not essential, such as cached data
}


- (void)dealloc {
    [super dealloc];
}

@end